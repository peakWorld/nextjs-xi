// 文件导入
@import url('./var.less');

/** 变量 */
@width: 10px; // AtRuleVar{name, value|params} => variable:true
@height: @width + 10px;
@my-selector: banner;
@images: "../img";
@property: color;

body {
  height: @height; // Decl{value}
}

// 变量插值 @{xx}
.@{my-selector} { // Rule{selector}
  @{property}: #0ee; // Decl{prop}
  font-weight: bold;
  background: url("@{images}/white-sand.png"); // Decl{value}
}

// 属性作为变量 $xx
.block {
  color: red;
  background-color: $color; // Decl{value}

  padding: 20px;
  .inner {
    margin: $padding; // Decl{value}
  }
}

/** 父选择器 */
a.text {
  color: blue;
  &:hover { // Rule{selector}
    color: green;
  }
  & & {
    color: green;
  }
}

/** Extend */
.inline {
  color: red;
}
nav ul {
  &:extend(.inline); // Decl{prop, value} => extend:true
  background: blue;
}
nav ul:extend(.inline) { // Rule{selector} => extend:true
  background: green;
}

/** Merge */
.mixin() {
  box-shadow+: inset 0 0 10px #555;
  transform+_: scale(2);
}
.myclass {
  .mixin();
  box-shadow+: 0 0 20px black; // + 逗号链接
  transform+_: rotate(15deg); // +_ 空格链接
}

/** Mixins */
.a{ // 在CSS输出
  color: red;
}
#b() { // 带括号, 不在CSS输出
  background-color: green;
}
.mixin-class {
  .a(); // AtRuleMixin{name, params} => mixin:true
  #b();
}

// 参数
.mixin (@bg; @color: #900) {
  background: @bg; // Decl{value} 父级selector中是否传入参数
  color: @color;
}
.class1 {
  .mixin(#f5f5f5 no-repeat, green) !important; // AtRuleMixin{name, params}
}
// 参数-命名
.class2 {
  .mixin(@color: #efca44; @bg: red);
}

// 参数-arguments
.box-shadow(@x: 0, @y: 0, @blur: 1px, @color: #000) {
  box-shadow: @arguments;
}
.big-block {
  .box-shadow(2px, 5px);
}
